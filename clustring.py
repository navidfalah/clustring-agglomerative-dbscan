# -*- coding: utf-8 -*-
"""clustring.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qXq8XXaS0l8t9U49C8pozjQ-JoCenyPJ
"""

### clustring

!pip install mglearn
import mglearn
import numpy as np
import matplotlib.pyplot as plt

mglearn.plots.plot_kmeans_algorithm()

mglearn.plots.plot_kmeans_boundaries()

from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

X, y = make_blobs(random_state=1)
kmeans = KMeans(n_clusters=3)
kmeans.fit(X)

kmeans.labels_

kmeans.predict(X)

fig, axes = plt.subplots(1, 2, figsize=(10, 5))

kmeans = KMeans(n_clusters=2)
kmeans.fit(X)

assignments = kmeans.labels_

mglearn.discrete_scatter(X[:, 0], X[:, 1], assignments, ax=axes[0])

kmeans = KMeans(n_clusters=5)
kmeans.fit(X)
assignments = kmeans.labels_

mglearn.discrete_scatter(X[:, 0], X[:, 1], assignments, ax=axes[1])

x_varied, y_varied = make_blobs(n_samples=200,
                             cluster_std=[1.0, 2.5, 0.5],
                             random_state=170)
y_varied = KMeans(n_clusters=3, random_state=5).fit_predict(x_varied)

mglearn.discrete_scatter(x_varied[:, 0], x_varied[:, 1], y_varied)
plt.legend(["class 0", "class 1", "class 2"], loc='best')
plt.xlabel("feature 0")
plt.ylabel("feature 1");

y_varied = KMeans(n_clusters=5, random_state=5).fit_predict(x_varied)

mglearn.discrete_scatter(x_varied[:, 0], x_varied[:, 1], y_varied)
plt.legend(["class 0", "class 1", "class 2"], loc='best')
plt.xlabel("feature 0")
plt.ylabel("feature 1");

X, y = make_blobs(random_state=170, n_samples=600)
rng = np.random.RandomState(74)

transformation = rng.normal(size=(2, 2))
X = np.dot(X, transformation)

kmeans = KMeans(n_clusters=3)
kmeans.fit(X)
y_pred = kmeans.predict(X)

plt.scatter(X[:, 0], X[:, 1], c=y_pred, cmap=mglearn.cm3)
plt.xlabel("feature 0")
plt.ylabel("feature 1");
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            marker='^', c=[0, 1, 2], s=100)
plt.xlabel("feature 0")
plt.ylabel("feature 1")

### two moon dataset
from sklearn.datasets import make_moons

X, y = make_moons(n_samples=200, noise=0.05, random_state=0)

kmeans = KMeans(n_clusters=2)
kmeans.fit(X)
y_pred = kmeans.predict(X)

plt.scatter(X[:, 0], X[:, 1], c=y_pred, cmap=mglearn.cm3)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            marker='^', c=[0, 1], s=100)
plt.xlabel("feature 0")
plt.ylabel("feature 1");

### vector quantization
from sklearn.datasets import fetch_lfw_people
from sklearn.model_selection import train_test_split
from sklearn.decomposition import NMF, PCA
from sklearn.cluster import KMeans

people = fetch_lfw_people(min_faces_per_person=20, resize=0.7)
image_shape = people.images[0].shape
X_people = people.data
y_people = people.target
X_train, X_test, y_train, y_test = train_test_split(X_people, y_people,
                                                    random_state=0,
                                                    stratify=y_people)
nmf = NMF(n_components=15, random_state=0)
nmf.fit(X_train)

pca = PCA(n_components=15, whiten=True)
pca.fit(X_train)

kmeans = KMeans(n_clusters=15, random_state=0)
kmeans.fit(X_train)

x_reconstructed_pca = pca.inverse_transform(pca.transform(X_test))
x_reconstructed_kmeans = kmeans.cluster_centers_[kmeans.predict(X_test)]
x_reconstructed_nmf = np.dot(nmf.transform(X_test), nmf.components_)

fig , axes = plt.subplots(3, 5, figsize=(15, 12),
                          subplot_kw={'xticks': (), 'yticks': ()})
fig.suptitle("extracted components")

for ax, comp_kmeans, comp_pca, comp_nmf in zip(axes.T,
                                          kmeans.cluster_centers_,
                                          pca.components_,
                                          nmf.components_):
    ax[0].imshow(comp_kmeans.reshape(image_shape))
    ax[1].imshow(comp_pca.reshape(image_shape))
    ax[2].imshow(comp_nmf.reshape(image_shape))

axes[0, 0].set_ylabel("kmeans")
axes[1, 0].set_ylabel("pca")
axes[2, 0].set_ylabel("nmf")

fig, axes = plt.subplots(4, 5, figsize=(15, 12),
                         subplot_kw={'xticks': (), 'yticks': ()})
fig.suptitle("reconstructed images")
for ax, orig, rec_pca, rec_kmeans, rec_nmf in zip(axes.T,
                                                   X_test,
                                                   x_reconstructed_pca,
                                                   x_reconstructed_kmeans,
                                                   x_reconstructed_nmf):
    ax[0].imshow(orig.reshape(image_shape))
    ax[1].imshow(rec_pca.reshape(image_shape))
    ax[2].imshow(rec_kmeans.reshape(image_shape))
    ax[3].imshow(rec_nmf.reshape(image_shape))

axes[0, 0].set_ylabel("original")
axes[1, 0].set_ylabel("kmeans")
axes[2, 0].set_ylabel("pca")
axes[3, 0].set_ylabel("nmf")

X, y = make_moons(n_samples=200, noise=0.05, random_state=0)

kmeans = KMeans(n_clusters=10)
kmeans.fit(X)
y_pred = kmeans.predict(X)

plt.scatter(X[:, 0], X[:, 1], c=y_pred, cmap="Paired")
plt.xlabel("feature 0")
plt.ylabel("feature 1")
print("Cluster memberships:\n{}".format(y_pred))

distance_features = kmeans.transform(X)
print("Shape of the distance features: {}".format(distance_features.shape))
print("Values for the first five observations:\n{}".format(distance_features[:5]))

